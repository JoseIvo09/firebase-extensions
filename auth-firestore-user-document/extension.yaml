name: auth-firestore-user-document
version: 0.0.1
specVersion: v1beta
displayName: Manage user documents in Firestore

description: >-
  Creates a document in a Firestore collection of your choice for each user
  created in Firebase Authentication and populates it with the user fields you
  specify. Optionally deletes the user's document when deleting the user from
  Firebase Authentication.

license: Apache-2.0
sourceUrl: https://github.com/rowyio/firebase-extensions/tree/main/auth-firestore-user-document

author:
  authorName: Rowy
  email: hello@rowy.io
  url: https://rowy.io

contributors:
  - authorName: Yaman Katby
    email: me@yamankatby.com
    url: https://github.com/yamankatby

billingRequired: false

roles:
  - role: datastore.user
    reason: Allows the extension to create the user document in Firestore.
  - role: firebaseauth.admin
    reason: >-
      Allows the extension to read the user record from Firebase Authentication.

resources:
  - name: createUserDocument
    type: firebaseextensions.v1beta.function
    description: >-
      A function triggered by a user creation event in Firebase Authentication
      that creates the user document in Firestore.
    properties:
      location: ${LOCATION}
      eventTrigger:
        eventType: providers/firebase.auth/eventTypes/user.create
        resource: projects/${PROJECT_ID}
      runtime: 'nodejs16'

  - name: deleteUserDocument
    type: firebaseextensions.v1beta.function
    description: >-
      A function triggered by a user deletion event in Firebase Authentication
      that deletes the user document in Firestore if the instance is configured
      to do so.
    properties:
      location: ${LOCATION}
      eventTrigger:
        eventType: providers/firebase.auth/eventTypes/user.delete
        resource: projects/${PROJECT_ID}
      runtime: 'nodejs16'

  - name: backfillExistingUsers
    type: firebaseextensions.v1beta.function
    description: >-
      A function triggered right after the extension installation is complete
      that creates user documents for already existing users if the instance is
      configured to do so.
    properties:
      location: ${param:LOCATION}
      taskQueueTrigger: {}

params:
  - param: USERS_COLLECTION_PATH
    label: Users collection path
    description: >-
      The path to the collection where user documents will be created.
    type: string
    default: users
    example: users
    required: true

  - param: FIELDS_TO_POPULATE
    label: Fields to populate
    description: >-
      The fields to populate in the user document. If you select a field that
      does not exist in the user record, it will be ignored.
    type: multiselect
    options:
      - label: uid
        value: uid
      - label: email
        value: email
      - label: emailVerified
        value: emailVerified
      - label: displayName
        value: displayName
      - label: photoURL
        value: photoURL
      - label: phoneNumber
        value: phoneNumber
      - label: disabled
        value: disabled
      - label: creationTime
        value: creationTime
    default: email,displayName,photoURL
    required: true

  - param: DELETE_DOCUMENT_ON_USER_DELETE
    label: Delete document on user delete
    description: >-
      If you enable this option, the extension deletes the user document when the
      user is deleted from Firebase Authentication.
    type: select
    options:
      - label: Yes
        value: true
      - label: No
        value: false
    default: true
    required: true

  - param: BACKFILL_EXISTING_USERS
    label: Backfill existing users
    description: >-
      If you enable this option, the extension creates user documents for all
      existing users right after installation is complete.
    type: select
    options:
      - label: Yes
        value: true
      - label: No
        value: false
    default: true
    required: true

  - param: LOCATION
    label: Cloud Functions location
    description: >-
      Where do you want to deploy the functions created for this extension?
      For help selecting a location, refer to the [location selection
      guide](https://firebase.google.com/docs/functions/locations).
    type: select
    options:
      - label: Iowa (us-central1)
        value: us-central1
      - label: South Carolina (us-east1)
        value: us-east1
      - label: Northern Virginia (us-east4)
        value: us-east4
      - label: Los Angeles (us-west2)
        value: us-west2
      - label: Salt Lake City (us-west3)
        value: us-west3
      - label: Las Vegas (us-west4)
        value: us-west4
      - label: Warsaw (europe-central2)
        value: europe-central2
      - label: Belgium (europe-west1)
        value: europe-west1
      - label: London (europe-west2)
        value: europe-west2
      - label: Frankfurt (europe-west3)
        value: europe-west3
      - label: Zurich (europe-west6)
        value: europe-west6
      - label: Hong Kong (asia-east2)
        value: asia-east2
      - label: Tokyo (asia-northeast1)
        value: asia-northeast1
      - label: Osaka (asia-northeast2)
        value: asia-northeast2
      - label: Seoul (asia-northeast3)
        value: asia-northeast3
      - label: Mumbai (asia-south1)
        value: asia-south1
      - label: Jakarta (asia-southeast2)
        value: asia-southeast2
      - label: Montreal (northamerica-northeast1)
        value: northamerica-northeast1
      - label: Sao Paulo (southamerica-east1)
        value: southamerica-east1
      - label: Sydney (australia-southeast1)
        value: australia-southeast1
    required: true
    immutable: true

lifecycleEvents:
  onInstall:
    function: backfillExistingUsers
    processingMessage: Backfilling already existing users...
